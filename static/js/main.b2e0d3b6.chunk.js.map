{"version":3,"sources":["component/Title.js","component/inputForm.js","component/Numbers.js","component/Result.js","component/Operator.js","App.js","serviceWorker.js","index.js"],"names":["Title","InputFrom","props","onChange","errorMsg","name","placeholder","match","className","Numbers","firstNumber","changeFirstNumber","changeSecondNumber","secondNumber","Result","operator","useState","result","setResult","useEffect","Math","round","Number","ivisionJudge","operatorJudge","Operator","changeoperator","map","value","type","App","setFirstNumber","setSecondNumber","setOperator","e","target","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2e0d3b6.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n  return <h2>四則運算</h2>\n}\n\nexport default Title\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction InputFrom(props) {\n  const { onChange, errorMsg, name } = props\n  const numberJudge = (value) => {\n    if (!value.match('^[0-9]*$')) {\n      return <p className=\"redword mg40\">限定數字</p>\n    }\n    return null\n  }\n  return (\n    <div>\n      <span>{name}</span>\n      <input placeholder=\"請輸入第一個數字\" onChange={onChange} />\n      {numberJudge(errorMsg)}\n    </div>\n  )\n}\n\nInputFrom.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  errorMsg: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n}\n\nexport default InputFrom\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport InputFrom from './inputForm'\n\nfunction Numbers(props) {\n  const { firstNumber, changeFirstNumber, changeSecondNumber, secondNumber } = props\n\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        <InputFrom name=\"數字1\" onChange={changeFirstNumber} errorMsg={firstNumber} />\n        <InputFrom name=\"數字2\" onChange={changeSecondNumber} errorMsg={secondNumber} />\n      </div>\n    </div>\n  )\n}\n\nNumbers.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  changeFirstNumber: PropTypes.func.isRequired,\n  changeSecondNumber: PropTypes.func.isRequired,\n}\n\nexport default Numbers\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ivisionJudge = (firstNumber, secondNumber, setResult) => {\n  if (firstNumber.match('^0') && secondNumber.match('^0')) {\n    setResult('無解')\n  } else if (firstNumber.match('^[0-9]*$') && secondNumber.match('^0')) {\n    setResult('∞(無限大)')\n  } else if (firstNumber.match('^0') && secondNumber.match('^[0-9]*$')) {\n    setResult('0')\n  } else if (!firstNumber.match('^[0-9]*$') || !secondNumber.match('^[0-9]*$')) {\n    setResult('')\n  } else if (firstNumber === '' || secondNumber === '') {\n    setResult('')\n  } else {\n    setResult(firstNumber / secondNumber)\n  }\n}\n\nfunction Result(props) {\n  const { firstNumber, secondNumber, operator } = props\n  const [result, setResult] = useState('')\n  useEffect(() => {\n    const operatorJudge = () => {\n      switch (operator) {\n        case '+':\n          setResult(Math.round(Number(firstNumber) + Number(secondNumber)))\n          break\n        case '-':\n          setResult(Math.round(firstNumber - secondNumber))\n          break\n        case '*':\n          setResult(Math.round(firstNumber * secondNumber))\n          break\n        case '/':\n          ivisionJudge(firstNumber, secondNumber, setResult)\n          break\n        default:\n      }\n    }\n    operatorJudge()\n  }, [operator, result, firstNumber, secondNumber])\n  return (\n    <p className=\"minheight\">\n      答案為:\n      {result}\n    </p>\n  )\n}\n\nResult.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  operator: PropTypes.string.isRequired,\n}\n\nexport default Result\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Operator(props) {\n  const { changeoperator, firstNumber, secondNumber } = props\n  const operatorValue = ['+', '-', '*', '/']\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        {operatorValue.map((value) => (\n          <div>\n            <span>{value}</span>\n            <input type=\"radio\" value={value} onChange={changeoperator} name=\"operator \" />\n          </div>\n        ))}\n      </div>\n      {(firstNumber === '' || secondNumber === '') && (\n        <p className=\"redword\">請先輸入數字,再選取算法</p>\n      )}\n    </div>\n  )\n}\n\nOperator.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  changeoperator: PropTypes.func.isRequired,\n}\n\nexport default Operator\n","import React, { useState } from 'react'\nimport Title from './component/Title'\nimport Numbers from './component/Numbers'\nimport Result from './component/Result'\nimport Operator from './component/Operator'\nimport './App.css'\n\nfunction App() {\n  const [firstNumber, setFirstNumber] = useState('')\n  const [secondNumber, setSecondNumber] = useState('')\n  const [operator, setOperator] = useState('')\n  const changeFirstNumber = (e) => {\n    setFirstNumber(e.target.value)\n  }\n  const changeSecondNumber = (e) => {\n    setSecondNumber(e.target.value)\n  }\n  const changeoperator = (e) => {\n    if (firstNumber === '' || secondNumber === '') {\n      e.target.checked = false\n      setOperator('')\n    } else {\n      setOperator(e.target.value)\n    }\n  }\n  return (\n    <div className=\"center\">\n      <Title />\n      <Numbers\n        changeFirstNumber={changeFirstNumber}\n        changeSecondNumber={changeSecondNumber}\n        firstNumber={firstNumber}\n        secondNumber={secondNumber}\n        operator={operator}\n      />\n      <Operator\n        changeoperator={changeoperator}\n        firstNumber={firstNumber}\n        secondNumber={secondNumber}\n      />\n      <Result firstNumber={firstNumber} secondNumber={secondNumber} operator={operator} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}