{"version":3,"sources":["component/Title.js","component/Numbers.js","component/Result.js","component/Operator.js","App.js","serviceWorker.js","index.js"],"names":["Title","Numbers","props","firstText","changeFirstText","changeSecondText","secondText","wordDisplay","value","match","className","placeholder","onChange","Result","result","method","Math","round","Number","Operator","changeMethod","map","type","name","App","useState","setFirstText","setSecondText","setMethod","e","target","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAQeA,MANf,WACE,OACE,yDCkCWC,MAnCf,SAAiBC,GAAQ,IAErBC,EACED,EADFC,UAAWC,EACTF,EADSE,gBAAiBC,EAC1BH,EAD0BG,iBAAkBC,EAC5CJ,EAD4CI,WAE1CC,EAAc,SAACC,GACnB,OAAKA,EAAMC,MAAM,YAER,KADC,uBAAGC,UAAU,gBAAb,6BAIZ,OACE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,6BACE,+CACA,2BAAOC,YAAY,mDAAWC,SAAUR,IACvCG,EAAYJ,IAEf,6BACE,+CACA,2BAAOQ,YAAY,mDAAWC,SAAUP,IACvCE,EAAYD,OCoBRO,MAzCf,SAAgBX,GAAQ,IAElBY,EADIX,EAAkCD,EAAlCC,UAAWG,EAAuBJ,EAAvBI,WAEnB,OAF0CJ,EAAXa,QAG7B,IAAK,IACHD,EAASE,KAAKC,MAAMC,OAAOf,GAAae,OAAOZ,IAC/C,MACF,IAAK,IACHQ,EAASE,KAAKC,MAAMd,EAAYG,GAChC,MACF,IAAK,IACHQ,EAASE,KAAKC,MAAMd,EAAYG,GAChC,MACF,IAAK,IAEDQ,EADEX,EAAUM,MAAM,OAASH,EAAWG,MAAM,MACnC,eACc,KAAdN,GAAoBA,EAAUM,MAAM,aAAeH,EAAWG,MAAM,MACpE,6BACCN,EAAUM,MAAM,aAAgBH,EAAWG,MAAM,YAEpC,KAAdN,GAAmC,KAAfG,EACpB,GAEAH,EAAYG,EAJZ,GAQf,OACE,uBAAGI,UAAU,aAAb,sBAEGI,ICJQK,MA1Bf,SAAkBjB,GAAQ,IAChBkB,EAAwClB,EAAxCkB,aAAcjB,EAA0BD,EAA1BC,UAAWG,EAAeJ,EAAfI,WAEjC,OACE,yBAAKI,UAAU,aACb,yBAAKA,UAAU,WAHG,CAAC,IAAK,IAAK,IAAK,KAKhBW,KAAI,SAACb,GAAD,OAChB,6BACE,8BAAOA,GACP,2BAAOc,KAAK,QAAQd,MAAOA,EAAOI,SAAUQ,EAAcG,KAAK,iBAKvD,KAAdpB,GAAmC,KAAfG,IAAuB,uBAAGI,UAAU,WAAb,mE,MCiBpCc,MA5Bf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNtB,EADM,KACKuB,EADL,OAEuBD,mBAAS,IAFhC,mBAENnB,EAFM,KAEMqB,EAFN,OAGeF,mBAAS,IAHxB,mBAGNV,EAHM,KAGEa,EAHF,KAYb,OACE,yBAAKlB,UAAU,UACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEN,gBAZkB,SAACyB,GAAQH,EAAaG,EAAEC,OAAOtB,QAajDH,iBAZmB,SAACwB,GAAQF,EAAcE,EAAEC,OAAOtB,QAanDL,UAAWA,EACXG,WAAYA,EACZS,OAAQA,IAEV,kBAAC,EAAD,CAAUK,aAhBO,SAACS,GACF,KAAd1B,GAAmC,KAAfG,GACtBuB,EAAEC,OAAOC,SAAU,EACnBH,EAAU,KACHA,EAAUC,EAAEC,OAAOtB,QAYYL,UAAWA,EAAWG,WAAYA,IACxE,kBAAC,EAAD,CAAQH,UAAWA,EAAWG,WAAYA,EAAYS,OAAQA,MClBhDiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZN2B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2fe219b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Title() {\r\n  return (\r\n    <h2>四則運算</h2>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Numbers(props) {\n  const {\n    firstText, changeFirstText, changeSecondText, secondText,\n  } = props;\n  const wordDisplay = (value) => {\n    if (!value.match('^[0-9]*$')) {\n      return (<p className=\"redword mg40\">限定數字</p>);\n    } return null;\n  };\n\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        <div>\n          <span>數字1</span>\n          <input placeholder=\"請輸入第一個數字\" onChange={changeFirstText} />\n          {wordDisplay(firstText)}\n        </div>\n        <div>\n          <span>數字2</span>\n          <input placeholder=\"請輸入第二個數字\" onChange={changeSecondText} />\n          {wordDisplay(secondText)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nNumbers.propTypes = {\n  firstText: PropTypes.string.isRequired,\n  secondText: PropTypes.string.isRequired,\n  changeFirstText: PropTypes.func.isRequired,\n  changeSecondText: PropTypes.func.isRequired,\n};\n\nexport default Numbers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Result(props) {\n  const { firstText, secondText, method } = props;\n  let result;\n  switch (method) {\n    case '+':\n      result = Math.round(Number(firstText) + Number(secondText));\n      break;\n    case '-':\n      result = Math.round(firstText - secondText);\n      break;\n    case '*':\n      result = Math.round(firstText * secondText);\n      break;\n    case '/':\n      if (firstText.match('^0') && secondText.match('^0')) {\n        result = '無解';\n      } else if (firstText !== '' && firstText.match('^[0-9]*$') && secondText.match('^0')) {\n        result = '∞(無限大)';\n      } else if (!firstText.match('^[0-9]*$') || !secondText.match('^[0-9]*$')) {\n        result = '';\n      } else if (firstText === '' || secondText === '') {\n        result = '';\n      } else {\n        result = firstText / secondText;\n      } break;\n    default:\n  }\n  return (\n    <p className=\"minheight\">\n      答案為:\n      {result}\n    </p>\n  );\n}\n\nResult.propTypes = {\n  firstText: PropTypes.string.isRequired,\n  secondText: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Operator(props) {\n  const { changeMethod, firstText, secondText } = props;\n  const operatorValue = ['+', '-', '*', '/'];\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        {\n          operatorValue.map((value) => (\n            <div>\n              <span>{value}</span>\n              <input type=\"radio\" value={value} onChange={changeMethod} name=\"method\" />\n            </div>\n          ))\n        }\n      </div>\n      {(firstText === '' || secondText === '') && (<p className=\"redword\">請輸入數字,在選取算法</p>)}\n    </div>\n  );\n}\n\nOperator.propTypes = {\n  firstText: PropTypes.string.isRequired,\n  secondText: PropTypes.string.isRequired,\n  changeMethod: PropTypes.func.isRequired,\n};\n\nexport default Operator;\n","import React, { useState } from 'react';\nimport Title from './component/Title';\nimport Numbers from './component/Numbers';\nimport Result from './component/Result';\nimport Operator from './component/Operator';\nimport './App.css';\n\nfunction App() {\n  const [firstText, setFirstText] = useState('');\n  const [secondText, setSecondText] = useState('');\n  const [method, setMethod] = useState('');\n  const changeFirstText = (e) => { setFirstText(e.target.value); };\n  const changeSecondText = (e) => { setSecondText(e.target.value); };\n  const changeMethod = (e) => {\n    if (firstText === '' || secondText === '') {\n      e.target.checked = false;\n      setMethod('');\n    } else { setMethod(e.target.value); }\n  };\n  return (\n    <div className=\"center\">\n      <Title />\n      <Numbers\n        changeFirstText={changeFirstText}\n        changeSecondText={changeSecondText}\n        firstText={firstText}\n        secondText={secondText}\n        method={method}\n      />\n      <Operator changeMethod={changeMethod} firstText={firstText} secondText={secondText} />\n      <Result firstText={firstText} secondText={secondText} method={method} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}