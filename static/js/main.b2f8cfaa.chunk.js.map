{"version":3,"sources":["component/Title.js","component/Numbers.js","component/Result.js","component/Operator.js","App.js","serviceWorker.js","index.js"],"names":["Title","Numbers","props","word","word2","changefirstText","changesecondText","firstText","secondText","method","match","className","placeholder","onChange","Result","result","Math","round","Number","isNaN","Infinity","Operator","changemethod","type","value","name","App","useState","setfirstText","setsecondText","setmethod","e","target","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2f8cfaa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Title() {\r\n  return (\r\n    <h2>四則運算</h2>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nfunction Numbers(props) {\r\n  const { changefirstText, changesecondText } = props;\r\n  const { firstText ,secondText, method } = props;\r\n  let word;\r\n  let word2;\r\n  if (method === '/' && firstText.match('0')) {\r\n    word = <p className=\"redword mg40\">除法數值不能為0</p>;\r\n  } else if (!firstText.match('^[0-9]*$')) {\r\n    word = <p className=\"redword mg40\">限定數字</p>;\r\n  } else {\r\n    word = null;\r\n  }\r\n  if (method === '/' && secondText.match('0')) {\r\n    word2 = <p className=\"redword mg40\">除法數值不能為0</p>;\r\n  } else if (!secondText.match('^[0-9]*$')) {\r\n    word2 = <p className=\"redword mg40\">限定數字</p>;\r\n  } else {\r\n    word2 = null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"minheight\">\r\n      <div className=\"flexbox\">\r\n        <div>\r\n          <span>數字1</span>\r\n          <input placeholder=\"請輸入第一個數字\" onChange={changefirstText} />\r\n          {word}\r\n          {/* {firstText.match('^[0-9]*$') ? null : (<p className=\"redword mg40\">限定數字</p>)} */}\r\n          {/* {method !== '/' ? null : <p className=\"redword mg40\">除法不能有0</p>} */}\r\n        </div>\r\n        <div>\r\n          <span>數字2</span>\r\n          <input placeholder=\"請輸入第二個數字\" onChange={changesecondText} />\r\n          {word2}\r\n          {/* {secondText.match('^[0-9]*$') ? null : (<p className=\"redword mg40\">限定數字</p>)} */}\r\n          {/* {method !== '/' ? null : <p className=\"redword mg40\">除法不能有0</p>} */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Numbers;\r\n","import React from 'react';\r\n\r\nfunction Result(props) {\r\n  const { firstText, secondText, method } = props;\r\n  //   const firstText = Number(...props);\r\n  //   const secondText = Number(...props);\r\n  //   const method = { ...props };\r\n  let result;\r\n  switch (method) {\r\n    case '+':\r\n      result = Math.round(Number(firstText) + Number(secondText));\r\n      break;\r\n    case '-':\r\n      result = Math.round(firstText - secondText);\r\n      break;\r\n    case '*':\r\n      result = Math.round(firstText * secondText);\r\n      break;\r\n    case '/':\r\n      result = firstText / secondText;\r\n      break;\r\n    default:\r\n  }\r\n  return (\r\n    <p className=\"minheight\">\r\n      答案為:\r\n      {firstText === '' || secondText === '' || Number.isNaN(Number(result)) || result === Infinity ? '' : result}\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\n\r\nfunction Operator(props) {\r\n  const { changemethod, firstText, secondText } = props;\r\n  return (\r\n    <div className=\"minheight\">\r\n      <div className=\"flexbox\">\r\n        <div>\r\n          <span>+</span>\r\n          <input type=\"radio\" value=\"+\" onChange={changemethod} name=\"method\" />\r\n        </div>\r\n        <div>\r\n          <span>-</span>\r\n          <input type=\"radio\" value=\"-\" onChange={changemethod} name=\"method\" />\r\n        </div>\r\n        <div>\r\n          <span>*</span>\r\n          <input type=\"radio\" value=\"*\" onChange={changemethod} name=\"method\" />\r\n        </div>\r\n        <div>\r\n          <span>/</span>\r\n          <input type=\"radio\" value=\"/\" onChange={changemethod} name=\"method\" />\r\n        </div>\r\n      </div>\r\n      {firstText === '' || secondText === '' ? (<p className=\"redword\">請輸入數字,再選取算法</p>) : null}\r\n    </div>\r\n  );\r\n}\r\nexport default Operator;\r\n","import React, { useState } from 'react';\r\nimport Title from './component/Title';\r\nimport Numbers from './component/Numbers';\r\nimport Result from './component/Result';\r\nimport Operator from './component/Operator';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [firstText, setfirstText] = useState('');\r\n  const [secondText, setsecondText] = useState('');\r\n  const [method, setmethod] = useState('');\r\n  const changefirstText = (e) => { setfirstText(e.target.value); };\r\n  const changesecondText = (e) => { setsecondText(e.target.value); };\r\n  const changemethod = (e) => {\r\n    if (firstText === '' || secondText === '') {\r\n      e.target.checked = false;\r\n      setmethod('');\r\n    } else { setmethod(e.target.value); }\r\n  };\r\n  return (\r\n    <div className=\"center\">\r\n      <Title />\r\n      <Numbers\r\n        changefirstText={changefirstText}\r\n        changesecondText={changesecondText}\r\n        firstText={firstText}\r\n        secondText={secondText}\r\n        method={method}\r\n      />\r\n      <Operator changemethod={changemethod} firstText={firstText} secondText={secondText} />\r\n      <Result firstText={firstText} secondText={secondText} method={method} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}