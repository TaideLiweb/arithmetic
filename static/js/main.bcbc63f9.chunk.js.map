{"version":3,"sources":["component/Title.js","component/Numbers.js","component/Result.js","component/Operator.js","App.js","serviceWorker.js","index.js"],"names":["Title","Numbers","props","firstNumber","changefirstNumber","changesecondNumber","secondNumber","wordDisplay","value","match","className","placeholder","onChange","Result","operator","useState","result","setResult","useEffect","Math","round","Number","ivisionJudge","operatorJudge","Operator","changeoperator","map","type","name","App","setFirstNumber","setSecondNumber","setOperator","e","target","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bcbc63f9.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n  return <h2>四則運算</h2>\n}\n\nexport default Title\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Numbers(props) {\n  const { firstNumber, changefirstNumber, changesecondNumber, secondNumber } = props\n  const wordDisplay = (value) => {\n    if (!value.match('^[0-9]*$')) {\n      return <p className=\"redword mg40\">限定數字</p>\n    }\n    return null\n  }\n\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        <div>\n          <span>數字1</span>\n          <input placeholder=\"請輸入第一個數字\" onChange={changefirstNumber} />\n          {wordDisplay(firstNumber)}\n        </div>\n        <div>\n          <span>數字2</span>\n          <input placeholder=\"請輸入第二個數字\" onChange={changesecondNumber} />\n          {wordDisplay(secondNumber)}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nNumbers.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  changefirstNumber: PropTypes.func.isRequired,\n  changesecondNumber: PropTypes.func.isRequired,\n}\n\nexport default Numbers\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ivisionJudge = (firstNumber, secondNumber, setResult) => {\n  if (firstNumber.match('^0') && secondNumber.match('^0')) {\n    setResult('無解')\n  } else if (firstNumber.match('^[0-9]*$') && secondNumber.match('^0')) {\n    setResult('∞(無限大)')\n  } else if (firstNumber.match('^0') && secondNumber.match('^[0-9]*$')) {\n    setResult('0')\n  } else if (!firstNumber.match('^[0-9]*$') || !secondNumber.match('^[0-9]*$')) {\n    setResult('')\n  } else if (firstNumber === '' || secondNumber === '') {\n    setResult('')\n  } else {\n    setResult(firstNumber / secondNumber)\n  }\n}\n\nfunction Result(props) {\n  const { firstNumber, secondNumber, operator } = props\n  const [result, setResult] = useState('')\n  useEffect(() => {\n    const operatorJudge = () => {\n      switch (operator) {\n        case '+':\n          setResult(Math.round(Number(firstNumber) + Number(secondNumber)))\n          break\n        case '-':\n          setResult(Math.round(firstNumber - secondNumber))\n          break\n        case '*':\n          setResult(Math.round(firstNumber * secondNumber))\n          break\n        case '/':\n          ivisionJudge(firstNumber, secondNumber, setResult)\n          break\n        default:\n      }\n    }\n    operatorJudge()\n  }, [operator, result, firstNumber, secondNumber])\n  return (\n    <p className=\"minheight\">\n      答案為:\n      {result}\n    </p>\n  )\n}\n\nResult.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  operator: PropTypes.string.isRequired,\n}\n\nexport default Result\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Operator(props) {\n  const { changeoperator, firstNumber, secondNumber } = props\n  const operatorValue = ['+', '-', '*', '/']\n  return (\n    <div className=\"minheight\">\n      <div className=\"flexbox\">\n        {operatorValue.map((value) => (\n          <div>\n            <span>{value}</span>\n            <input type=\"radio\" value={value} onChange={changeoperator} name=\"operator \" />\n          </div>\n        ))}\n      </div>\n      {(firstNumber === '' || secondNumber === '') && (\n        <p className=\"redword\">請輸入數字,再選取算法</p>\n      )}\n    </div>\n  )\n}\n\nOperator.propTypes = {\n  firstNumber: PropTypes.string.isRequired,\n  secondNumber: PropTypes.string.isRequired,\n  changeoperator: PropTypes.func.isRequired,\n}\n\nexport default Operator\n","import React, { useState } from 'react'\nimport Title from './component/Title'\nimport Numbers from './component/Numbers'\nimport Result from './component/Result'\nimport Operator from './component/Operator'\nimport './App.css'\n\nfunction App() {\n  const [firstNumber, setFirstNumber] = useState('')\n  const [secondNumber, setSecondNumber] = useState('')\n  const [operator, setOperator] = useState('')\n  const changefirstNumber = (e) => {\n    setFirstNumber(e.target.value)\n  }\n  const changesecondNumber = (e) => {\n    setSecondNumber(e.target.value)\n  }\n  const changeoperator = (e) => {\n    if (firstNumber === '' || secondNumber === '') {\n      e.target.checked = false\n      setOperator('')\n    } else {\n      setOperator(e.target.value)\n    }\n  }\n  return (\n    <div className=\"center\">\n      <Title />\n      <Numbers\n        changefirstNumber={changefirstNumber}\n        changesecondNumber={changesecondNumber}\n        firstNumber={firstNumber}\n        secondNumber={secondNumber}\n        operator={operator}\n      />\n      <Operator\n        changeoperator={changeoperator}\n        firstNumber={firstNumber}\n        secondNumber={secondNumber}\n      />\n      <Result firstNumber={firstNumber} secondNumber={secondNumber} operator={operator} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}